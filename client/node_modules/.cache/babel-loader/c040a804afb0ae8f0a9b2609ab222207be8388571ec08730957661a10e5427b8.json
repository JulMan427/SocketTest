{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\honey\\\\OneDrive\\\\Desktop\\\\SocketTest\\\\client\\\\src\\\\Voting.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { socket } from \"./socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Voting = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const {\n    room,\n    prompts\n  } = location.state; // Get only the prompts (anonymous)\n  const [selectedPrompt, setSelectedPrompt] = useState(null);\n\n  // Submit vote\n  const submitVote = () => {\n    if (selectedPrompt !== null) {\n      socket.emit(\"submit_vote\", {\n        room,\n        votedPrompt: selectedPrompt\n      });\n    }\n  };\n\n  // Transition to results screen when voting ends\n  socket.on(\"game_over\", winnerData => {\n    navigate(\"/results\", {\n      state: {\n        winner: winnerData.winner\n      }\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Vote for the Best Prompt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), prompts.map((prompt, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedPrompt(prompt),\n        style: {\n          background: selectedPrompt === prompt ? \"lightblue\" : \"white\"\n        },\n        children: prompt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submitVote,\n      disabled: selectedPrompt === null,\n      children: \"Submit Vote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(Voting, \"UwkncLr3CJ67Nx9k41tx3ewCOVA=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Voting;\nexport default Voting;\nvar _c;\n$RefreshReg$(_c, \"Voting\");","map":{"version":3,"names":["React","useState","useNavigate","useLocation","socket","jsxDEV","_jsxDEV","Voting","_s","navigate","location","room","prompts","state","selectedPrompt","setSelectedPrompt","submitVote","emit","votedPrompt","on","winnerData","winner","children","fileName","_jsxFileName","lineNumber","columnNumber","map","prompt","index","onClick","style","background","disabled","_c","$RefreshReg$"],"sources":["C:/Users/honey/OneDrive/Desktop/SocketTest/client/src/Voting.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { socket } from \"./socket\";\r\n\r\nconst Voting = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { room, prompts } = location.state; // Get only the prompts (anonymous)\r\n  const [selectedPrompt, setSelectedPrompt] = useState(null);\r\n\r\n  // Submit vote\r\n  const submitVote = () => {\r\n    if (selectedPrompt !== null) {\r\n      socket.emit(\"submit_vote\", { room, votedPrompt: selectedPrompt });\r\n    }\r\n  };\r\n\r\n  // Transition to results screen when voting ends\r\n  socket.on(\"game_over\", (winnerData) => {\r\n    navigate(\"/results\", { state: { winner: winnerData.winner } });\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <h2>Vote for the Best Prompt</h2>\r\n      {prompts.map((prompt, index) => (\r\n        <div key={index}>\r\n          <button\r\n            onClick={() => setSelectedPrompt(prompt)}\r\n            style={{ background: selectedPrompt === prompt ? \"lightblue\" : \"white\" }}\r\n          >\r\n            {prompt}\r\n          </button>\r\n        </div>\r\n      ))}\r\n      <button onClick={submitVote} disabled={selectedPrompt === null}>Submit Vote</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Voting;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,SAASC,MAAM,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAMQ,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEQ,IAAI;IAAEC;EAAQ,CAAC,GAAGF,QAAQ,CAACG,KAAK,CAAC,CAAC;EAC1C,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAE1D;EACA,MAAMe,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIF,cAAc,KAAK,IAAI,EAAE;MAC3BV,MAAM,CAACa,IAAI,CAAC,aAAa,EAAE;QAAEN,IAAI;QAAEO,WAAW,EAAEJ;MAAe,CAAC,CAAC;IACnE;EACF,CAAC;;EAED;EACAV,MAAM,CAACe,EAAE,CAAC,WAAW,EAAGC,UAAU,IAAK;IACrCX,QAAQ,CAAC,UAAU,EAAE;MAAEI,KAAK,EAAE;QAAEQ,MAAM,EAAED,UAAU,CAACC;MAAO;IAAE,CAAC,CAAC;EAChE,CAAC,CAAC;EAEF,oBACEf,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAAgB,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAChCd,OAAO,CAACe,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACzBvB,OAAA;MAAAgB,QAAA,eACEhB,OAAA;QACEwB,OAAO,EAAEA,CAAA,KAAMf,iBAAiB,CAACa,MAAM,CAAE;QACzCG,KAAK,EAAE;UAAEC,UAAU,EAAElB,cAAc,KAAKc,MAAM,GAAG,WAAW,GAAG;QAAQ,CAAE;QAAAN,QAAA,EAExEM;MAAM;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD;IAAC,GANDG,KAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAOV,CACN,CAAC,eACFpB,OAAA;MAAQwB,OAAO,EAAEd,UAAW;MAACiB,QAAQ,EAAEnB,cAAc,KAAK,IAAK;MAAAQ,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjF,CAAC;AAEV,CAAC;AAAClB,EAAA,CAlCID,MAAM;EAAA,QACOL,WAAW,EACXC,WAAW;AAAA;AAAA+B,EAAA,GAFxB3B,MAAM;AAoCZ,eAAeA,MAAM;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}